"""Create datastructure documentation page

This will add a page with various svg graphs and html tables
describing the datastructure: dependencies, columns provided,
and configuration options that apply to each plugins.

For extra credit, the SVGs are clickable.
"""
from collections import defaultdict
import os
import shutil

import matplotlib
import pandas as pd
import graphviz
import strax

this_dir = os.path.dirname(os.path.realpath(__file__))


page_header = """
Strax XENON datastrure
========================

This page is an autogenerated reference for all the XENON plugins in strax. 

Colors indicate data kinds. To load tables with different data kinds,
you currently need more than one `get_df` (or `get_array`) commands.

"""


template = """
{data_type}
--------------------------------------------------------

Description
~~~~~~~~~~~~~~~~~~~~~~

Provided by plugin: {p.__class__.__name__}

Data kind: {p.data_kind}

{docstring}


Dependencies
~~~~~~~~~~~~~~~~~~~~~~
.. raw:: html

{svg}


Columns provided
~~~~~~~~~~~~~~~~~~~~~~
.. raw:: html

{columns}


Configuration options
~~~~~~~~~~~~~~~~~~~~~~~

These are all options that affect this data type. 
This also includes options taken by dependencies of this datatype,
because changing any of those options affect this data indirectly.

.. raw:: html

{config_options}


"""


kind_colors = dict(
    events='white',
    peaks='palegreen',
    records='orange',
    raw_records='orangered')


def add_spaces(x):
    """Add four spaces to every line in x

    This is needed to make html raw blocks in rst format correctly
    """
    y = ''
    if isinstance(x, str):
        x = x.split('\n')
    for q in x:
        y += '    ' + q
    return y


def build_datastructure_doc():
    out = page_header

    pd.set_option('display.max_colwidth', -1)

    st = strax.Context(register_all=strax.xenon.plugins)

    # Too lazy to write proper graph sorter
    plugins_by_deps = defaultdict(list)

    for pn, p in st._plugin_class_registry.items():
        plugins = st._get_plugins((pn,), run_id='0')
        plugins_by_deps[len(plugins)].append(pn)

    os.makedirs(this_dir + '/graphs', exist_ok=True)

    for n_deps in list(reversed(sorted(list(plugins_by_deps.keys())))):
        for data_type in plugins_by_deps[n_deps]:
            plugins = st._get_plugins((data_type,), run_id='0')

            # Create dependency graph
            g = graphviz.Digraph(format='svg')
            for d, p in plugins.items():
                g.node(d,
                       style='filled',
                       href='#' + d.replace('_', '-'),
                       fillcolor=matplotlib.colors.to_hex(
                           kind_colors[p.data_kind],
                       ))
                for dep in p.depends_on:
                    g.edge(d, dep)
            fn = this_dir + '/graphs/' + data_type
            g.render(fn)
            with open(fn + '.svg', mode='r') as f:
                svg = add_spaces(f.readlines()[5:])

            config_df = st.show_config(d).sort_values(by='option')

            # Shorten long default values
            config_df['default'] = [
                x[:10] + '...' + x[-10:]
                if isinstance(x, str) and len(x) > 30 else x
                for x in config_df['default'].values]

            p = plugins[data_type]

            out += template.format(
                p=p,
                svg=svg,
                data_type=data_type,
                columns=add_spaces(
                    st.data_info(data_type).to_html(index=False)
                ),
                docstring=p.__doc__ if p.__doc__ else '(no plugin description)',
                config_options=add_spaces(
                    config_df.to_html(index=False))
            )

    with open(this_dir + '/reference/datastructure.rst', mode='w') as f:
        f.write(out)

    shutil.rmtree(this_dir + '/graphs')


try:
    if __name__ == '__main__':
        build_datastructure_doc()
except KeyError:
    # Whatever
    pass
